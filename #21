// 21. Merge Two Sorted Lists
/*
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 // my solution, iteratively
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode *merged = new ListNode(0);
        ListNode *mergedPtr = merged;
        while(l1||l2){
            ListNode *temp = NULL;
            if(!l1) {
                temp = new ListNode(l2 -> val);
                l2 = l2 -> next;}
            else if(!l2) {
                temp = new ListNode(l1 -> val); 
                l1 = l1 -> next;}
            else {
                temp = new ListNode(min(l1->val,l2->val));
                if(l1 -> val < l2 -> val)
                    l1 = l1 -> next;
                else l2 = l2 -> next;}
            mergedPtr -> next = temp;
            mergedPtr = mergedPtr -> next;
        }
        return merged -> next;
    }
};
// an online recursive solution
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if (l1 == NULL) return l2;
    if (l2 == NULL) return l1;
    if (l1->val <= l2->val) {
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    } else {
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;}
    }
};
