// 191. Number of 1 Bits
/*
Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.
*/
// my first solution, kind of stupid
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        uint32_t m;
        for(int i = 0; i < 32; i ++){
            m = n >> 1;
            m = m << 1;
            if(m != n) count ++;
            n = n >> 1;
        }
        return count;
    }
};

// clear, simple version
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res;
        while(n){
            if(n&1 == 1){
                res++;
            }
            n >>= 1;
        }
        return res;
    }
};
